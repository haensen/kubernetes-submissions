name: Release application

on:
  push:
    branches:
      - "**"
    paths:
      - "project/**"
      - ".github/workflows/main.yaml"
    tags:
      - "!**" # Don't trigger on releases

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: dwk-cluster
  GKE_ZONE: europe-north1-b
  REGISTRY: europe-north1-docker.pkg.dev
  REPOSITORY: my-repo
  IMAGE1: todo_app
  SERVICE1: todo-app-dep
  IMAGE2: todo_backend
  SERVICE2: todo-backend-dep
  IMAGE3: db_backup
  BRANCH: ${{ github.ref_name }}

jobs:
  build-publish-deploy:
    name: Build, Publish and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GKE_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: google-github-actions/setup-gcloud@v2

      - name: 'Use gcloud CLI'
        run: gcloud info

      - name: 'Configure docker to use gcloud'
        run: gcloud --quiet auth configure-docker $REGISTRY

      - name: 'Get GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          project_id: '${{ env.PROJECT_ID }}'
          location: '${{ env.GKE_ZONE }}'

      - name : 'Form the image name 1'
        run: echo "IMAGE_TAG1=$REGISTRY/$PROJECT_ID/$REPOSITORY/$IMAGE1:$BRANCH-$GITHUB_SHA" >> $GITHUB_ENV
      - name: Build 1
        run: docker build --tag $IMAGE_TAG1 project/$IMAGE1/.
      - name: Publish 1
        run: docker push $IMAGE_TAG1

      - name : 'Form the image name 2'
        run: echo "IMAGE_TAG2=$REGISTRY/$PROJECT_ID/$REPOSITORY/$IMAGE2:$BRANCH-$GITHUB_SHA" >> $GITHUB_ENV
      - name: Build 2
        run: docker build --tag $IMAGE_TAG2 project/$IMAGE2/.
      - name: Publish 2
        run: docker push $IMAGE_TAG2

      - name : 'Form the image name 3'
        run: echo "IMAGE_TAG3=$REGISTRY/$PROJECT_ID/$REPOSITORY/$IMAGE3:$BRANCH-$GITHUB_SHA" >> $GITHUB_ENV
      - name: Build 3
        run: docker build --tag $IMAGE_TAG3 project/$IMAGE3/.
      - name: Publish 3
        run: docker push $IMAGE_TAG3
      
      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v2.1.0

      - name: 'Get namespace name'
        run: |-
          if [ "${GITHUB_REF#refs/heads/}" == "main" ]; then
            echo "NAMESPACE=project" >> $GITHUB_ENV;
          else
            echo "NAMESPACE=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV;
          fi

      - name: Deploy
        run: |-
          cd project
          kubectl create namespace $NAMESPACE || true
          kubectl config set-context --current --namespace=$NAMESPACE
          kustomize edit set namespace $NAMESPACE
          kustomize edit set image TODO-APP-IMAGE=$IMAGE_TAG1
          kustomize edit set image TODO-BACKEND-IMAGE=$IMAGE_TAG2
          kustomize edit set image DB-BACKUP-IMAGE=$IMAGE_TAG3
          kustomize build . | kubectl apply -f -
          kubectl rollout status deployment $SERVICE1 -n $NAMESPACE
          kubectl rollout status deployment $SERVICE2 -n $NAMESPACE
          kubectl get services -o wide -n $NAMESPACE